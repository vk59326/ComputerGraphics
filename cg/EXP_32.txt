#include<iostream.h>
#include<iostream.h>
#include<graphics.h>
#include<conio.h>
#include<stdio.h>
#include<math.h>
#define  f                 0.3
#define  projection_angle   45
void trans();
void scale();
void rotate();
void show_screen( );
void apply_x_shearing(int[5][3],float,float);
void multiply_matrices(float[4],float[4][4],float[4]);
void draw_pyramid(int [5][3]);
void get_projected_point(int&,int&,int&);
void Line(int,int,int,int);
int maxx,maxy,midx,midy;
int main()
{
	    int ch;
	    int gd=DETECT,gm;
	    detectgraph(&gd,&gm);
	    initgraph(&gd,&gm,"..\\bgi");
	    cout<<"WAP to perform 3D COMPOSITE translation of object:"<<endl;
	    cout<<"1.Translation \n2.Scaling\n 3.Rotation \n 4.Shearing \n5.Exit\n";
	    printf("enter your choice");
	    scanf("%d",&ch);
	    do
	    {
			switch(ch)
			{
				    case 1 :
					     trans();
					     getch();
					     break;
				     case 2 :
					     scale();
					     getch();
					     break;
				    case 3 :
					     rotate();
					     getch();                                                           break;

				    case 4 :
					     show_screen( );
					     int pyramid[5][3]={
								  {280,220,40},      //  base front left
								  {360,220,40},      //  base front right
								  {360,220,-40},     //  base back right
								  {280,220,-40},     //  base back left
								  {320,100,0}        //  top

	     };
      setcolor(15);
     draw_pyramid(pyramid);
       setcolor(15);
       settextstyle(0,0,1);
       outtextxy(50,455,"*** Press any key to see the 3D Shearing along x-axis.");
       apply_x_shearing(pyramid,0.4,0.3);
       getch( );
       setcolor(10);
       draw_pyramid(pyramid);
       getch( );
					     break;
				     case 5:
					     return 0;
			}
			printf("enter your choice");
			scanf("%d",&ch);

	    } while(ch<4);
	    return 0;
}
void trans()
{

	    int x,y,z,o,x1,x2,y1,y2;
	    maxx=getmaxx();
            maxy=getmaxy();
            midx=maxx/2;
            midy=maxy/2;
            bar3d(midx+50,midy-100,midx+60,midy-90,10,1);
            printf("Enter translation factor");
            scanf("%d%d",&x,&y);
            printf("After translation:");
            bar3d(midx+x+50,midy-(y+100),midx+x+60,midy-(y+90),10,1);
}
void scale()
{

            int x,y,z,o,x1,x2,y1,y2;
            maxx=getmaxx();
            maxy=getmaxy();
            midx=maxx/2;
            midy=maxy/2;
            bar3d(midx+50,midy-100,midx+60,midy-90,5,1);
            printf("before translation\n");
            printf("Enter scaling factors\n");
            scanf("%d %d %d", &x,&y,&z);
            printf("After scaling\n");
            bar3d(midx+(x*50),midy-(y*100),midx+(x*60),midy-(y*90),5*z,1);
}
void rotate()
{
            int x,y,z,o,x1,x2,y1,y2;
            maxx=getmaxx();
            maxy=getmaxy();
            midx=maxx/2;
            midy=maxy/2;
	    bar3d(midx+50,midy-100,midx+60,midy-90,5,1);
	    printf("Enter rotating angle");
	    scanf("%d",&o);
	    x1=50*cos(o*3.14/180)-100*sin(o*3.14/180);
     //	    y1=50*sin(o*3.14/180)+100*cos(o*3.14/180);
	    x2=60*cos(o*3.14/180)-90*sin(o*3.14/180);
   //	    y2=60*sin(o*3.14/180)+90*cos(o*3.14/180);
	    printf("After rotation  about x axis");
	    bar3d(midx+50,midy-x1,midx+60,midy-x2,5,1);
	    printf("After rotation about yaxis");
	    bar3d(midx+x1,midy-100,midx+x2,midy-90,5,1);
}
void    apply_x_shearing(int edge_points[5][3],float a,float b)
      {
       for(int count=0;count<5;count++)
       {
	 float matrix_a[4]={edge_points[count][0],edge_points[count][1],
			    edge_points[count][2],1};
	 float matrix_b[4][4]={
		    { 1,a,b,0 } ,
		    { 0,1,0,0 } ,
		    { 0,0,1,0 } ,
		    { 0,0,0,1 }
		  };

	 float matrix_c[4]={0};

	 multiply_matrices(matrix_a,matrix_b,matrix_c);

	 edge_points[count][0]=(int)(matrix_c[0]+0.5);
	 edge_points[count][1]=(int)(matrix_c[1]+0.5);
	 edge_points[count][2]=(int)(matrix_c[2]+0.5);
      }
    }
 /************************************************************************///----------------------  multiply_matrices( )  ------------------------///************************************************************************/void multiply_matrices(constfloat matrix_1[4],
void  multiply_matrices(float matrix_1[4], float matrix_2[4][4], float matrix_3[4])
    {
       for(int count_1=0;count_1<4;count_1++)
       {
	 for(int count_2=0;count_2<4;count_2++)
		matrix_3[count_1]+=
	       (matrix_1[count_2]*matrix_2[count_2][count_1]);
       }
    }

 /************************************************************************///--------------------------  draw_pyramid( )  -------------------------///************************************************************************/void draw_pyramid(constint points[5][3])
void draw_pyramid(int points[5][3])
 {
       int edge_points[5][3];

       for(int i=0;i<5;i++)
      {
	 edge_points[i][0]=points[i][0];
	 edge_points[i][1]=points[i][1];
	 edge_points[i][2]=points[i][2];

	 get_projected_point(edge_points[i][0],
		    edge_points[i][1],edge_points[i][2]);
      }

       Line(edge_points[0][0],edge_points[0][1],
		      edge_points[1][0],edge_points[1][1]);
       Line(edge_points[1][0],edge_points[1][1],
		      edge_points[2][0],edge_points[2][1]);
       Line(edge_points[2][0],edge_points[2][1],
		      edge_points[3][0],edge_points[3][1]);
       Line(edge_points[3][0],edge_points[3][1],
		      edge_points[0][0],edge_points[0][1]);

       Line(edge_points[0][0],edge_points[0][1],
		      edge_points[4][0],edge_points[4][1]);
       Line(edge_points[1][0],edge_points[1][1],
		      edge_points[4][0],edge_points[4][1]);
       Line(edge_points[2][0],edge_points[2][1],
		      edge_points[4][0],edge_points[4][1]);
       Line(edge_points[3][0],edge_points[3][1],
		      edge_points[4][0],edge_points[4][1]);
    }

 /************************************************************************///---------------------  get_projected_point( )  -----------------------///************************************************************************/void get_projected_point(int& x,int& y,int& z)
void  get_projected_point(int &x,int &y,int &z)
{
       float fcos0=(f*cos(projection_angle*(M_PI/180)));
       float fsin0=(f*sin(projection_angle*(M_PI/180)));

       float Par_v[4][4]={
		{1,0,0,0},
		{0,1,0,0},
		{fcos0,fsin0,0,0},
		{0,0,0,1}
	     };

       float xy[4]={x,y,z,1};
       float new_xy[4]={0};

       multiply_matrices(xy,Par_v,new_xy);

       x=(int)(new_xy[0]+0.5);
       y=(int)(new_xy[1]+0.5);
       z=(int)(new_xy[2]+0.5);
}

 /*************************************************************************///-------------------------------  Line( )  -----------------------------///*************************************************************************/void Line(constint x_1,constint y_1,constint x_2,constint y_2)
void Line(int x_1,int y_1,int x_2,int y_2){
       int color=getcolor( );

       int x1=x_1;
       int y1=y_1;

       int x2=x_2;
       int y2=y_2;

       if(x_1>x_2)
      {
	 x1=x_2;
	 y1=y_2;

	 x2=x_1;
	 y2=y_1;
      }

       int dx=abs(x2-x1);
       int dy=abs(y2-y1);
       int inc_dec=((y2>=y1)?1:-1);

       if(dx>dy)
      {
	 int two_dy=(2*dy);
	 int two_dy_dx=(2*(dy-dx));
	 int p=((2*dy)-dx);

	 int x=x1;
	 int y=y1;

	 putpixel(x,y,color);

	 while(x<x2)
	{
	   x++;

	   if(p<0)
	      p+=two_dy;

	   else
	      {
	     y+=inc_dec;
	     p+=two_dy_dx;
	      }

	   putpixel(x,y,color);
	}
      }

       else
      {
	 int two_dx=(2*dx);
	 int two_dx_dy=(2*(dx-dy));
	 int p=((2*dx)-dy);

	 int x=x1;
	 int y=y1;

	 putpixel(x,y,color);

	 while(y!=y2)
	{
	   y+=inc_dec;

	   if(p<0)
	      p+=two_dx;

	   else
	      {
	     x++;
	     p+=two_dx_dy;
	      }

	   putpixel(x,y,color);
	}
      }
    }

 /*************************************************************************///--------------------------  show_screen( )  ---------------------------///*************************************************************************/void show_screen( )
void  show_screen( )
{
       setfillstyle(1,1);
     bar(210,60,420,78);

       settextstyle(0,0,1);
     setcolor(15);
       outtextxy(5,65,"*-----------------------                             ------------------------*");
     setcolor(11);
       outtextxy(218,65,"3D Shearing along x-axis");

     setcolor(15);
       outtextxy(5,400,"*-------------------------                          -------------------------*");
     setcolor(12);
       outtextxy(229,400,"Press any Key to exit.");
    }